{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/ProductRegistration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./StateTransition.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract ProductRegistration is ReentrancyGuard {\n\taddress public immutable STATE_CONTRACT;\n\tuint constant ID_NOT_SET = 0;\n\n\tstruct Product {\n\t\tuint id;\n\t\tbytes24 hashedRfid;\n\t\tstring name;\n\t\tuint origin;\n\t\tuint timestamp;\n\t\taddress owner;\n\t}\n\n\tmapping(uint => Product) public products;\n\n\tevent ProductRegistered(uint id, string name, uint origin, address owner);\n\tevent OwnershipTransferred(uint id, address newOwner);\n\n\tconstructor(address _addr) {\n\t\trequire(_addr != address(0), \"State contract address cannot be zero\");\n\t\tSTATE_CONTRACT = _addr;\n\t}\n\n\tfunction registerProduct(\n\t\tuint id,\n\t\tbytes24 rfid,\n\t\tstring memory name,\n\t\tuint origin\n\t) public nonReentrant {\n\t\trequire(\n\t\t\tproducts[id].id == ID_NOT_SET,\n\t\t\t\"Product with this ID already registered\"\n\t\t);\n\t\trequire(id > ID_NOT_SET, \"Invalid product ID\");\n\t\trequire(bytes(name).length > ID_NOT_SET, \"Product name is required\");\n\t\trequire(rfid.length == 24, \"RFID signature must be 24 bytes\");\n\n\t\tproducts[id] = Product(\n\t\t\tid,\n\t\t\trfid,\n\t\t\tname,\n\t\t\torigin,\n\t\t\tblock.timestamp,\n\t\t\tmsg.sender\n\t\t);\n\n\t\tStateTransition st = StateTransition(STATE_CONTRACT);\n\t\tst.updateState(id, rfid, StateTransition.State.Created, origin);\n\t\temit ProductRegistered(id, name, origin, msg.sender);\n\t}\n\n\tfunction transferOwnership(\n\t\tuint id,\n\t\tstring memory password,\n\t\taddress newOwner\n\t) public nonReentrant {\n\t\trequire(\n\t\t\tproducts[id].owner == msg.sender,\n\t\t\t\"Only owner can change ownership\"\n\t\t);\n\t\trequire(\n\t\t\tproducts[id].hashedRfid ==\n\t\t\t\tbytes24(keccak256(abi.encodePacked(password))),\n\t\t\t\"Invalid Password\"\n\t\t);\n\t\trequire(newOwner != address(0), \"New owner address cannot be zero\");\n\n\t\tproducts[id].owner = newOwner;\n\t\temit OwnershipTransferred(id, newOwner);\n\t}\n\n\tfunction getProduct(uint id) public view returns (Product memory) {\n\t\trequire(products[id].id != ID_NOT_SET, \"No Product Registered\");\n\t\treturn products[id];\n\t}\n}\n"
    },
    "contracts/StateTransition.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract StateTransition {\n\tuint constant NOT_REGISTERED = 0;\n\n\tenum State {\n\t\tCreated,\n\t\tStorage,\n\t\tShipped,\n\t\tReceived\n\t}\n\n\tstruct ProductState {\n\t\tuint id;\n\t\tbytes24 hashedRfid;\n\t\tState state;\n\t\tstring location;\n\t\tuint timestamp;\n\t}\n\n\tuint public nodeCount;\n\tmapping(uint => string) public supplyChainNodes;\n\tmapping(uint => ProductState) public productStates;\n\n\tevent ProductStateUpdated(\n\t\tuint id,\n\t\tState newState,\n\t\tstring location,\n\t\tuint timestamp\n\t);\n\n\t// Constructor populates supply chain nodes and provides nodeCount\n\tconstructor(string[] memory nodes) {\n\t\tsupplyChainNodes[0] = \"In Transit\";\n\t\tnodeCount = nodes.length + 2; // Adding 2 for \"In Transit\" and \"End User\"\n\t\tfor (uint i = 1; i <= nodes.length; i++) {\n\t\t\tsupplyChainNodes[i] = nodes[i - 1];\n\t\t}\n\t\tsupplyChainNodes[nodes.length + 1] = \"End User\";\n\t}\n\n\t// This function is used to update the current state of a proudct.\n\tfunction updateState(\n\t\tuint id,\n\t\tbytes24 rfid,\n\t\tState newState,\n\t\tuint location\n\t) public {\n\t\t//bytes32 hashed = keccak256(abi.encodePacked(rfid)); // Hashes the RFID hash\n\n\t\trequire(\n\t\t\tproductStates[id].id == NOT_REGISTERED ||\n\t\t\t\tproductStates[id].hashedRfid == rfid,\n\t\t\t\"Improper Inputs\"\n\t\t);\n\t\trequire(location < nodeCount, \"Invalid location\");\n\t\t// Enforce that if the new state is Shipped, the location must be 0\n\t\tif (newState == State.Shipped) {\n\t\t\trequire(\n\t\t\t\tlocation == 0,\n\t\t\t\t\"Location must be 0 (In Transit) when status is Shipped\"\n\t\t\t);\n\t\t}\n\t\tproductStates[id] = ProductState(\n\t\t\tid,\n\t\t\trfid,\n\t\t\tnewState,\n\t\t\tsupplyChainNodes[location],\n\t\t\tblock.timestamp\n\t\t);\n\n\t\temit ProductStateUpdated(\n\t\t\tid,\n\t\t\tnewState,\n\t\t\tsupplyChainNodes[location],\n\t\t\tblock.timestamp\n\t\t);\n\t}\n\n\t// Returns the current state based on the Product ID\n\tfunction getState(uint id) public view returns (ProductState memory) {\n\t\treturn productStates[id];\n\t}\n\n\t// Returns a list of all the Nodes and their indices\n\tfunction fetchNodes()\n\t\tpublic\n\t\tview\n\t\treturns (uint[] memory ids, string[] memory nodes)\n\t{\n\t\tuint[] memory _ids = new uint[](nodeCount);\n\t\tstring[] memory _nodes = new string[](nodeCount);\n\t\tfor (uint256 i = 0; i < nodeCount; i++) {\n\t\t\t_ids[i] = i;\n\t\t\t_nodes[i] = supplyChainNodes[i];\n\t\t}\n\t\treturn (_ids, _nodes);\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}